import logging
import io
from aiogram import Router, types
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.enums import ParseMode
from bot.state.car_info import CarInfo
from bot.services.openrouter_client import client, ask_llm_with_image, ask_llm_with_text
import re

logger = logging.getLogger(__name__)
router = Router(name=__name__)


_heading_re = re.compile(r"^#+\s*(.*)$", flags=re.MULTILINE)  # ### –ó–∞–≥–æ–ª–æ–≤–æ–∫
_asterisk_re = re.compile(r"\*+")  # –ª—é–±—ã–µ * –∏–ª–∏ **


def md_headings_to_html(text: str) -> str:
    text = _heading_re.sub(r"<b>\1</b>", text)  # –∑–∞–≥–æ–ª–æ–≤–∫–∏ ‚Üí <b>
    text = _asterisk_re.sub("", text)  # —É–¥–∞–ª—è–µ–º –≤—Å–µ *
    return text


WELCOME_TEXT = (
    "<b>üöò –ü—Ä–∏–≤–µ—Ç! –Ø ‚Äî AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π —Ä–∞–∑–±–∏—Ä–∞—Ç—å—Å—è —Å –ø–æ–ª–æ–º–∫–∞–º–∏ –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–π.</b>\n\n"
    "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å, –Ω–∞–ø–∏—à–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–º–∞—Ä–∫—É —Ç–≤–æ–µ–π –º–∞—à–∏–Ω—ã</b> ‚Äî –Ω–∞–ø—Ä–∏–º–µ—Ä: "
    "<i>BMW</i>, <i>LADA</i>, <i>Toyota</i>, <i>Kia</i> –∏ —Ç.–¥.\n\n"
    "–≠—Ç–æ –ø–æ–º–æ–∂–µ—Ç –º–Ω–µ —Ç–æ—á–Ω–µ–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–µ–π, "
    "–∫–æ–≥–¥–∞ —Ç—ã –æ–ø–∏—à–µ—à—å –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø—Ä–∏—à–ª—ë—à—å —Ñ–æ—Ç–æ.\n\n"
    "<b>–ñ–¥—É –º–∞—Ä–∫—É –∞–≤—Ç–æ–º–æ–±–∏–ª—è!</b> üõ†Ô∏è"
)


@router.message(Command("start"))
async def cmd_start(msg: types.Message, state: FSMContext) -> None:
    await msg.answer(WELCOME_TEXT)
    await state.set_state(CarInfo.waiting_for_car_brand)
    logger.debug("FSM: user %s -> waiting_for_car_brand", msg.from_user.id)


@router.message(CarInfo.waiting_for_car_brand)
async def handle_car_brand(msg: types.Message, state: FSMContext) -> None:
    brand = msg.text.strip()
    logger.info("Received car brand '%s' from user id=%s", brand, msg.from_user.id)

    await state.update_data(car_brand=brand)
    logger.debug("FSM: saved car_brand for user %s", msg.from_user.id)

    await msg.answer(
        f"–°–ø–∞—Å–∏–±–æ! –Ø –∑–∞–ø–æ–º–Ω–∏–ª: <b>{brand}</b>.\n"
        "–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, <b>–º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ –¥–≤–∏–≥–∞—Ç–µ–ª—è</b>."
    )
    await state.set_state(CarInfo.waiting_for_motor_model)


@router.message(CarInfo.waiting_for_motor_model)
async def handle_motor_model(msg: types.Message, state: FSMContext) -> None:
    model = msg.text.strip()
    logger.info("Received motor model '%s' from user id=%s", model, msg.from_user.id)

    await state.update_data(motor_model=model)
    logger.debug("FSM: saved motor_model for user %s", msg.from_user.id)

    data = await state.get_data()
    brand_saved = data["car_brand"]

    await msg.answer(
        f"–û—Ç–ª–∏—á–Ω–æ! –° –≤–∞–º–∏ –ø—Ä–∏—è—Ç–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å.\n"
        f"–ú–∞—Ä–∫–∞: <b>{brand_saved}</b>\n"
        f"–ú–æ—Ç–æ—Ä: <b>{model}</b>\n\n"
        "–¢–µ–ø–µ—Ä—å –æ–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Ñ–æ—Ç–æ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏."
    )
    await state.set_state(CarInfo.msg_or_photo_breaking)


@router.message(CarInfo.msg_or_photo_breaking)
async def handle_problem_input(msg: types.Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –Ω–µ–∏—Å–ø—Ä–∞–≤–Ω–æ—Å—Ç–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ç—Ä—ë—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤."""

    # 1. –¥–æ—Å—Ç–∞–µ–º –º–∞—Ä–∫—É –∏ –º–æ—Ç–æ—Ä
    data = await state.get_data()
    brand = data.get("car_brand", "unknown brand")
    motor = data.get("motor_model", "unknown motor")

    # 2. –æ–ø—Ä–µ–¥–µ–ª—è–µ–º –≤–∏–¥ –≤–≤–æ–¥–∞
    image_bytes: bytes | None = None
    user_text = ""

    if msg.photo:  # —Ñ–æ—Ç–æ –µ—Å—Ç—å
        # —Å–∫–∞—á–∏–≤–∞–µ–º –Ω–∞–∏–±–æ–ª—å—à–µ–µ —Ñ–æ—Ç–æ
        largest_photo: types.PhotoSize = msg.photo[-1]
        file = await msg.bot.get_file(largest_photo.file_id)
        buffer = io.BytesIO()
        await msg.bot.download_file(file.file_path, buffer)
        buffer.seek(0)
        image_bytes = buffer.read()
        if msg.caption:
            user_text = msg.caption.strip()
        input_desc = "photo_with_caption" if user_text else "photo_only"
    else:  # —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç
        user_text = msg.text.strip() if msg.text else ""
        input_desc = "text_only"

    logger.info("User %s sent %s", msg.from_user.id, input_desc)

    # 3. —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫
    system_header = (
        f"–ú–∞—Ä–∫–∞: {brand}. –î–≤–∏–≥–∞—Ç–µ–ª—å: {motor}. "
        "–ù–∏–∂–µ –æ–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–∞–π 2‚Äì3 –≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã –∏ —à–∞–≥–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏."
    )
    prompt = f"{system_header}\n\n{user_text}"

    # 4. –≤—ã–∑—ã–≤–∞–µ–º –º–æ–¥–µ–ª—å
    try:
        if image_bytes:
            answer = await ask_llm_with_image(image_bytes, prompt)
        else:
            answer = await ask_llm_with_text(prompt)
    except Exception as e:
        logger.error("LLM request failed: %s", e, exc_info=True)
        await msg.answer("‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ LLM. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        return

    # 5. –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º markdown‚Äë–ª–∞–π—Ç ‚Üí HTML –∏ –æ—Ç–≤–µ—á–∞–µ–º
    html_answer = md_headings_to_html(answer)
    await msg.answer(html_answer)  # bot default parse_mode=HTML

    # 6. –æ—á–∏—â–∞–µ–º FSM
    await state.clear()
    logger.debug("FSM cleared for user %s", msg.from_user.id)
