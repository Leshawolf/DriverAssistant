import asyncio
import logging
import os

from aiogram import Bot, Dispatcher
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
from bot.handlers import cars  # –æ—Å–Ω–æ–≤–Ω–æ–π —Ä–æ—É—Ç–µ—Ä FSM –¥–ª—è —Å–±–æ—Ä–∞ –º–∞—Ä–∫–∏/–º–æ—Ç–æ—Ä–∞

# 1. –ü–æ–¥–≥—Ä—É–∂–∞–µ–º .env –¥–æ –ª—é–±–æ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# 2. –ß–∏—Ç–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    raise RuntimeError("–ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è –æ–∫—Ä—É–∂–µ–Ω–∏—è BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞")


async def main() -> None:
    """–¢–æ—á–∫–∞ –≤—Ö–æ–¥–∞ Telegram‚Äë–±–æ—Ç–∞."""

    # –ë–∞–∑–æ–≤–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s | %(levelname)s | %(name)s | %(message)s",
    )

    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Bot —Å parse_mode –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (aiogram >= 3.7)
    bot = Bot(
        token=BOT_TOKEN,
        default=DefaultBotProperties(parse_mode=ParseMode.HTML),
    )

    # –ü–∞–º—è—Ç–Ω–æ–µ FSM‚Äë—Ö—Ä–∞–Ω–∏–ª–∏—â–µ (–≤ –ø–∞–º—è—Ç–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞)
    dp = Dispatcher(storage=MemoryStorage())

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤—Å–µ —Ä–æ—É—Ç–µ—Ä—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    dp.include_router(cars.router)

    logging.info("üöÄ Bot started and polling updates‚Ä¶")
    await dp.start_polling(bot)


if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("üõë Bot stopped")
